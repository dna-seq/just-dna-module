from oakvar import BasePostAggregator
from pathlib import Path
import sqlite3
from typing import Dict, Optional
from abc import ABC

class JustPostAggregator(BasePostAggregator, ABC):
    
    result_table: str = "dna" # name of the result table, must be overriden in subclasses

    def create_table_sql(self):
        """
        Creates the output table sql. Must be overriden in subclasses
        For example:

        CREATE TABLE IF NOT EXISTS {self.result_table} (
            id integer NOT NULL PRIMARY KEY,
            gene text,
            rsid text,
            cdnachange text,
            genotype text,
            sequence_ontology text,
            cadd_phred float,
            sift_pred text,
            revel_score float,
            clinpred_score float,
            clinvar_sig text,
            omim_id text,
            clinvar_id text,
            ncbi_desc text
        )
        """

        raise NotImplementedError("Subclasses must implement create_table_sql")

        


    def check(self):
        """
        Is used if we want to keep main annotation loop
        """
        return True
    

    def setup(self):
        self.result_path = Path(self.output_dir, self.run_name + f"_{self.result_table}.sqlite")
        self.module_conn = sqlite3.connect(self.result_path)
        self.module_cursor = self.module_conn.cursor()

        sql_create = self.create_table_sql()
        self.module_cursor.execute(sql_create)
        self.module_cursor.execute(f"DELETE FROM {self.result_table};")
        self.module_conn.commit()

    def cleanup(self):
        if self.module_cursor is not None:
            self.module_cursor.close()
        if self.module_conn is not None:
            self.module_conn.commit()
            self.module_conn.close()
        return
    
    def insert_row(self, input_data: dict) -> tuple[str, str]:
        """
        Inserts a row into the result table.
        Must be overriden in subclasses
        Returns a tuple of sql query and values

        EXAMPLE OF SQL QUERY:
        INSERT INTO {self.result_table} (
            gene,
            rsid,
            cdnachange,
            genotype,
            sequence_ontology,
            cadd_phred,
            sift_pred,
            revel_score,
            clinpred_score,
            clinvar_sig,
            omim_id,
            clinvar_id,
            ncbi_desc
        ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)
        """
        raise NotImplementedError("Subclasses must implement insertion of the annotated row")

    def annotate(self, input_data: dict):
        (sql, task) = self.insert_row(input_data)

        self.module_cursor.execute(sql, task)